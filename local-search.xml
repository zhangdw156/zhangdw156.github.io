<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CSP-202303-3-LDAP</title>
    <link href="/2023/05/25/CSP-202303-3-LDAP/"/>
    <url>/2023/05/25/CSP-202303-3-LDAP/</url>
    
    <content type="html"><![CDATA[<h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>西西艾弗岛运营公司是一家负责维护和运营岛上基础设施的大型企业，拥有数千名员工。公司内有很多 IT 系统。为了能够实现这些 IT 系统的统一认证登录，公司 IT 部门决定引入一套 LDAP 系统来管理公司内的用户信息。轻型目录访问协议（Lightweight Directory Access Protocol，LDAP）是一种用于访问和维护目录服务的应用层协议，基于它的数据库可以用树形结构来组织和存储数据。每一笔数据，都包含了一个唯一的标识符（DN，Distinguished Name），以及一系列的属性（Attribute）。</p><p>不同的 IT 系统，允许访问的用户是不相同的。每个信息系统都有一个表达式，用来描述允许访问的用户。<br>这个表达式可以按照某一个属性的值作为条件来匹配用户，也可以用多个条件的逻辑组合来匹配用户。<br>小 C 被安排来实现这样一个算法，给定一个 IT 系统的匹配表达式，找到所有与之匹配的用户的 DN。</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>为了简化该问题，我们约定，每个用户的 DN 是一个正整数，且不会重复。有若干种用户的属性，用正整数编号。每个用户可以具有这些属性中的若干个，且每个属性只能有一个值。每个属性的值也是一个正整数。例如，假定有两个用户：用户 1 和用户 2，他们的 DN 分别是 1 和 2。一共有 3 种属性。用户 1 具有属性 1 和属性 2，且属性 1 的值为 2，属性 2 的值为 3；但不具有属性 3。用户 2 具有属性 2 和属性 3，且属性 2 的值为 3，属性 3 的值为 1；但不具有属性 1。如下表所示：</p><table><thead><tr><th>DN</th><th>属性 1</th><th>属性 2</th><th>属性 3</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>3</td><td>N&#x2F;A</td></tr><tr><td>2</td><td>N&#x2F;A</td><td>3</td><td>1</td></tr></tbody></table><p>一个匹配表达式可以是一个属性的值，也可以是多个匹配表达式的逻辑组合。只匹配一个属性的值的表达式称为原子表达式，原子表达式的形式为 <code>&lt;属性编号&gt;&lt;操作符&gt;&lt;属性值&gt;</code>。其中操作符有两种：断言与反断言。断言操作符为 <code>:</code>，表示匹配具有该属性且值与之相等的用户；反断言操作符为 <code>~</code>，表示匹配具有该属性且值与之不等的用户。例如，表达式 <code>1:2</code> 可以与上述用户 1 相匹配，但不能与用户 2 相匹配；而表达式 <code>3~1</code>则不能与任何一个用户相匹配。</p><p>表达式可以进行逻辑组合，其语法是：<code>&lt;操作符&gt;(表达式 1)(表达式 2)</code>。其中操作符有两种：与（<code>&amp;</code>）和或（<code>|</code>）。如果操作符为与，则当且仅当两个表达式都与某一用户相匹配时，该表达式与该用户相匹配；如果操作符为或，则当且仅当两个表达式中至少有一个与某一用户相匹配时，该表达式与该用户相匹配。例如，表达式 <code>&amp;(1:2)(2:3)</code> 可以与用户 1 相匹配，但不能与用户 2 相匹配；而表达式 <code>|(1:2)(3:1)</code> 则可以与两个用户都相匹配。</p><p>形式化地，上述语法用 BNF 范式表示如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs none">NON_ZERO_DIGIT =  &quot;1&quot; / &quot;2&quot; / &quot;3&quot; / &quot;4&quot; / <br>                  &quot;5&quot; / &quot;6&quot; / &quot;7&quot; / &quot;8&quot; / &quot;9&quot;<br>DIGIT          =  &quot;0&quot; / NON_ZERO_DIGIT<br>NUMBER         =  NON_ZERO_DIGIT / (NON_ZERO_DIGIT DIGIT*)<br>ATTRIBUTE      =  NUMBER<br>VALUE          =  NUMBER<br>OPERATOR       =  &quot;:&quot; / &quot;~&quot;<br>BASE_EXPR      =  ATTRIBUTE OPERATOR VALUE<br>LOGIC          =  &quot;&amp;&quot; / &quot;|&quot;<br>EXPR           =  BASE_EXPR / (LOGIC &quot;(&quot; EXPR &quot;)&quot; &quot;(&quot; EXPR &quot;)&quot;)<br><br>EASY_EXPR      =  BASE_EXPR / <br>                  (LOGIC &quot;(&quot; BASE_EXPR &quot;)&quot; &quot;(&quot; BASE_EXPR &quot;)&quot;)<br></code></pre></td></tr></table></figure><p>None</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>从标准输入读入数据。</p><p>输入的第一行包含一个正整数 n，表示用户的数目。</p><p>接下来 n行，每行包含空格分隔的若干个正整数，第一个正整数表示该用户的 DN，第二个正整数表示该用户具有的属性个数，此后的每两个正整数表示该用户具有的一个属性及其值。这些属性按照属性编号从小到大的顺序给出。</p><p>接下来一行包含一个正整数 m，表示匹配表达式的数目。</p><p>接下来 m 行，每行包含一个匹配表达式。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出到标准输出。</p><p>输出 m 行，每行包含零个或多个正整数，用空格分隔，表示与对应的匹配表达式相匹配的用户的 DN，由小到大排序。</p><h2 id="样例输入1"><a href="#样例输入1" class="headerlink" title="样例输入1"></a>样例输入1</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs data">2<br>1 2 1 2 2 3<br>2 2 2 3 3 1<br>4<br>1:2<br>3~1<br>&amp;(1:2)(2:3)<br>|(1:2)(3:1)<br></code></pre></td></tr></table></figure><p>Data</p><h2 id="样例输出1"><a href="#样例输出1" class="headerlink" title="样例输出1"></a>样例输出1</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs data">1<br><br>1<br>1 2<br></code></pre></td></tr></table></figure><p>Data</p><h2 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h2><p>本组输入是题目描述中的例子。</p><h2 id="子任务"><a href="#子任务" class="headerlink" title="子任务"></a>子任务</h2><p>对于 20% 的输入，有 1≤n≤100，1≤m≤10，每个用户的属性个数不超过 10，全部属性编号不超过 100，且表达式是原子表达式，即符合 BNF 语法 <code>BASE_EXPR</code>。</p><p>对于 40% 的输入，有 1≤m≤100，每个用户的属性个数不超过 10，全部属性编号不超过 100，且表达式中至多含有两个原子表达式的逻辑组合，即符合 BNF 语法 <code>EASY_EXPR</code>。</p><p>对于 70% 的输入，有全部属性编号不超过 500。</p><p>对于全部输入，有 1≤n≤2500，1≤m≤500，每个用户的属性个数不超过 500，全部属性编号、属性值和 DN 均不超过 109，每个表达式语句都符合题设语法，且语句字符长度不超过 2000。</p><h2 id="100分代码"><a href="#100分代码" class="headerlink" title="100分代码"></a>100分代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; pii;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FOR(i,s,e) for(int i=s;i&lt;=e;i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ROF(i,s,e) for(int i=s;i&gt;=e;i--)</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN=<span class="hljs-number">2505</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXM=<span class="hljs-number">505</span>;<br>map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; q[MAXN];<br>map&lt;pii,vector&lt;<span class="hljs-type">int</span>&gt;&gt; p;<br>map&lt;<span class="hljs-type">int</span>,vector&lt;<span class="hljs-type">int</span>&gt;&gt; has;<br><span class="hljs-type">int</span> to[MAXN],num[MAXN],f[MAXN];<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">char</span> op[MAXN];<br>bitset&lt;MAXN&gt; stk[MAXN*<span class="hljs-number">2</span>],res;<br><br><span class="hljs-function">bitset&lt;MAXN&gt; <span class="hljs-title">cal</span><span class="hljs-params">(<span class="hljs-type">char</span> sym,<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span> </span>&#123;<br>bitset&lt;MAXN&gt; ans;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;v:p[ &#123;i,j&#125;]) &#123;<br>ans.<span class="hljs-built_in">set</span>(v);<br>&#125;<br><span class="hljs-keyword">if</span>(sym==<span class="hljs-string">&#x27;~&#x27;</span>) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;v:has[i]) &#123;<br>ans.<span class="hljs-built_in">flip</span>(v);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>cin&gt;&gt;n;<br><span class="hljs-built_in">FOR</span>(i,<span class="hljs-number">1</span>,n) &#123;<br><span class="hljs-type">int</span> id,k;<br>cin&gt;&gt;id&gt;&gt;k;<br>to[i]=id;<br><span class="hljs-built_in">FOR</span>(j,<span class="hljs-number">1</span>,k) &#123;<br><span class="hljs-type">int</span> x,y;<br>cin&gt;&gt;x&gt;&gt;y;<br>q[i][x]=y;<br>has[x].<span class="hljs-built_in">push_back</span>(i);<br>p[ &#123;x,y&#125;].<span class="hljs-built_in">push_back</span>(i);<br>&#125;<br>&#125;<br>cin&gt;&gt;m;<br><span class="hljs-built_in">FOR</span>(i,<span class="hljs-number">1</span>,m) &#123;<br>string s;<br>cin&gt;&gt;s;<br><span class="hljs-type">int</span> c=<span class="hljs-number">0</span>,d=<span class="hljs-number">0</span>;<span class="hljs-comment">// 用于维护两个栈的栈顶指针 </span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;s.<span class="hljs-built_in">size</span>();) &#123;<br><span class="hljs-keyword">if</span>(s[j]==<span class="hljs-string">&#x27;&amp;&#x27;</span>||s[j]==<span class="hljs-string">&#x27;|&#x27;</span>) &#123;<br>op[++c]=s[j++];<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[j]==<span class="hljs-string">&#x27;(&#x27;</span>) &#123;<br>j++;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[j]==<span class="hljs-string">&#x27;)&#x27;</span>) &#123;<br>num[c]++;<br><span class="hljs-keyword">if</span>(num[c]==<span class="hljs-number">2</span>) &#123;<br>d--;<br><span class="hljs-keyword">if</span>(op[c]==<span class="hljs-string">&#x27;&amp;&#x27;</span>) &#123;<br>stk[d]=stk[d]&amp;stk[d+<span class="hljs-number">1</span>];<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>stk[d]=stk[d]|stk[d+<span class="hljs-number">1</span>];<br>&#125;<br>num[c--]=<span class="hljs-number">0</span>;<br>&#125;<br>j++;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">int</span> cur=j,l=<span class="hljs-number">0</span>,r=<span class="hljs-number">0</span>;<br><span class="hljs-comment">// 取出左边的数 </span><br><span class="hljs-keyword">while</span>(cur&lt;s.<span class="hljs-built_in">size</span>()&amp;&amp;s[cur]!=<span class="hljs-string">&#x27;:&#x27;</span>&amp;&amp;s[cur]!=<span class="hljs-string">&#x27;~&#x27;</span>) &#123;<br>l=l*<span class="hljs-number">10</span>+(s[cur]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>cur++;<br>&#125;<br><span class="hljs-comment">// 取出断言 </span><br><span class="hljs-type">char</span> x=s[cur++];<br><span class="hljs-comment">// 取出右边的数 </span><br><span class="hljs-keyword">while</span>(cur&lt;s.<span class="hljs-built_in">size</span>()&amp;&amp;s[cur]!=<span class="hljs-string">&#x27;)&#x27;</span>) &#123;<br>r=r*<span class="hljs-number">10</span>+(s[cur]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>cur++;<br>&#125;<br><span class="hljs-comment">// 结果放入栈 </span><br>stk[++d]=<span class="hljs-built_in">cal</span>(x,l,r);<br>j=cur;<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> e=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">FOR</span>(j,<span class="hljs-number">1</span>,n) &#123;<br><span class="hljs-keyword">if</span>(stk[d].<span class="hljs-built_in">test</span>(j)) &#123;<br>f[++e]=to[j];<br>&#125;<br>&#125;<br><span class="hljs-built_in">sort</span>(f+<span class="hljs-number">1</span>,f+e+<span class="hljs-number">1</span>);<br><span class="hljs-built_in">FOR</span>(j,<span class="hljs-number">1</span>,e) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d%c&quot;</span>,f[j],<span class="hljs-string">&quot; \n&quot;</span>[j==e]);<br>&#125;<br><span class="hljs-keyword">if</span>(!e)<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
      <tag>bitset</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>L2-007 家庭房产</title>
    <link href="/2023/05/19/L2-007-%E5%AE%B6%E5%BA%AD%E6%88%BF%E4%BA%A7/"/>
    <url>/2023/05/19/L2-007-%E5%AE%B6%E5%BA%AD%E6%88%BF%E4%BA%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="L2-007-家庭房产"><a href="#L2-007-家庭房产" class="headerlink" title="L2-007 家庭房产"></a>L2-007 家庭房产</h2><p>给定每个人的家庭成员和其自己名下的房产，请你统计出每个家庭的人口数、人均房产面积及房产套数。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出一个正整数<em>N</em>（≤1000），随后<em>N</em>行，每行按下列格式给出一个人的房产：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">编号 父 母 k 孩子1 <span class="hljs-string">...</span> 孩子k 房产套数 总面积<br></code></pre></td></tr></table></figure><p>其中<code>编号</code>是每个人独有的一个4位数的编号；<code>父</code>和<code>母</code>分别是该编号对应的这个人的父母的编号（如果已经过世，则显示<code>-1</code>）；<code>k</code>（0≤<code>k</code>≤5）是该人的子女的个数；<code>孩子i</code>是其子女的编号。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>首先在第一行输出家庭个数（所有有亲属关系的人都属于同一个家庭）。随后按下列格式输出每个家庭的信息：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">家庭成员的最小编号 家庭人口数 人均房产套数 人均房产面积<br></code></pre></td></tr></table></figure><p>其中人均值要求保留小数点后3位。家庭信息首先按人均面积降序输出，若有并列，则按成员编号的升序输出。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs in">10<br>6666 5551 5552 1 7777 1 100<br>1234 5678 9012 1 0002 2 300<br>8888 -1 -1 0 1 1000<br>2468 0001 0004 1 2222 1 500<br>7777 6666 -1 0 2 300<br>3721 -1 -1 1 2333 2 150<br>9012 -1 -1 3 1236 1235 1234 1 100<br>1235 5678 9012 0 1 50<br>2222 1236 2468 2 6661 6662 1 300<br>2333 -1 3721 3 6661 6662 6663 1 100<br></code></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs out">3<br>8888 1 1.000 1000.000<br>0001 15 0.600 100.000<br>5551 4 0.750 100.000<br></code></pre></td></tr></table></figure><h3 id="代码（25-x2F-25）"><a href="#代码（25-x2F-25）" class="headerlink" title="代码（25&#x2F;25）"></a>代码（25&#x2F;25）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">fam</span><br>&#123;<br><span class="hljs-type">int</span> id,num;<br><span class="hljs-type">double</span> avg1,avg2;<br>&#125;;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">10000</span>;<br><span class="hljs-type">int</span> father[N];<br><span class="hljs-type">int</span> root[N];<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> fam a,<span class="hljs-keyword">struct</span> fam b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(a.avg2 != b.avg2)<br><span class="hljs-keyword">return</span> a.avg2 &gt; b.avg2;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> a.id &lt; b.id;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)<br>&#123;<br>father[i] = i;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Find</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">while</span>(father[a] != a)<br>a = father[a];<br><span class="hljs-keyword">return</span> a;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Union</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> fa = <span class="hljs-built_in">Find</span>(a);<br><span class="hljs-type">int</span> fb = <span class="hljs-built_in">Find</span>(b);<br><span class="hljs-keyword">if</span>(fa &gt; fb)<br>father[fa] = fb;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(fa &lt; fb)<br>father[fb] = fa;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-built_in">Init</span>();<br>map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; mp1;<br>map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; mp2;<br>map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; mp3;<br>map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; mp4;<br>set&lt;<span class="hljs-type">int</span>&gt; st;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-type">int</span> id,dad,mom,k;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>,&amp;id,&amp;dad,&amp;mom,&amp;k);<br>st.<span class="hljs-built_in">insert</span>(id);<br><span class="hljs-keyword">if</span>(dad != <span class="hljs-number">-1</span>)<br>&#123;<br>st.<span class="hljs-built_in">insert</span>(dad);<br>    <span class="hljs-built_in">Union</span>(id,dad);<br>&#125;<br><span class="hljs-keyword">if</span>(mom != <span class="hljs-number">-1</span>)<br>&#123;<br>st.<span class="hljs-built_in">insert</span>(mom);<br><span class="hljs-built_in">Union</span>(id,mom);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; k; j++)<br>&#123;<br><span class="hljs-type">int</span> child;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;child);<br><span class="hljs-built_in">Union</span>(id,child);<br>st.<span class="hljs-built_in">insert</span>(child);<br>&#125;<br><span class="hljs-type">int</span> house,area;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;house,&amp;area);<br>mp1[id] = house;<br>mp2[id] = area;<br>&#125;<br>set&lt;<span class="hljs-type">int</span>&gt;::iterator it;<br><span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(it = st.<span class="hljs-built_in">begin</span>(); it != st.<span class="hljs-built_in">end</span>(); it++)<br>&#123;<br><span class="hljs-type">int</span> temp = <span class="hljs-built_in">Find</span>(*it);<br><span class="hljs-keyword">if</span>(root[temp] == <span class="hljs-number">0</span>)<br>count++;<br>root[temp]++;<br><span class="hljs-keyword">if</span>(mp1[*it])<br>&#123;<br>mp3[temp] += mp1[*it];<br>mp4[temp] += mp2[*it];<br>&#125;<br>&#125;<br><span class="hljs-function">vector&lt;fam&gt; <span class="hljs-title">v</span><span class="hljs-params">(count)</span></span>;<br><span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)<br>&#123;<br><span class="hljs-keyword">if</span>(root[i])<br>&#123;<br>v[t].id = i;<br>v[t].num = root[i];<br>v[t].avg1 = mp3[i] * <span class="hljs-number">1.0</span> / root[i];<br>v[t].avg2 = mp4[i] * <span class="hljs-number">1.0</span> / root[i];<br>t++;<br>&#125;<br>&#125;<br><span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(),v.<span class="hljs-built_in">end</span>(),cmp);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,count);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; count; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%04d %d %.3lf %.3lf\n&quot;</span>,v[i].id,v[i].num,v[i].avg1,v[i].avg2);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PTA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>L2-005 集合相似度</title>
    <link href="/2023/05/19/L2-005-%E9%9B%86%E5%90%88%E7%9B%B8%E4%BC%BC%E5%BA%A6/"/>
    <url>/2023/05/19/L2-005-%E9%9B%86%E5%90%88%E7%9B%B8%E4%BC%BC%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="L2-005-集合相似度"><a href="#L2-005-集合相似度" class="headerlink" title="L2-005 集合相似度"></a>L2-005 集合相似度</h2><p>给定两个整数集合，它们的相似度定义为：<em>N**c</em>&#x2F;<em>N**t</em>×100%。其中<em>N**c</em>是两个集合都有的不相等整数的个数，<em>N**t</em>是两个集合一共有的不相等整数的个数。你的任务就是计算任意一对给定集合的相似度。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出一个正整数<em>N</em>（≤50），是集合的个数。随后<em>N</em>行，每行对应一个集合。每个集合首先给出一个正整数<em>M</em>（≤104），是集合中元素的个数；然后跟<em>M</em>个[0,109]区间内的整数。</p><p>之后一行给出一个正整数<em>K</em>（≤2000），随后<em>K</em>行，每行对应一对需要计算相似度的集合的编号（集合从1到<em>N</em>编号）。数字间以空格分隔。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每一对需要计算的集合，在一行中输出它们的相似度，为保留小数点后2位的百分比数字。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs in">3<br>3 99 87 101<br>4 87 101 5 87<br>7 99 101 18 5 135 18 99<br>2<br>1 2<br>1 3<br></code></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs out">50.00%<br>33.33%<br></code></pre></td></tr></table></figure><h3 id="代码（21-x2F-25）"><a href="#代码（21-x2F-25）" class="headerlink" title="代码（21&#x2F;25）"></a>代码（21&#x2F;25）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FOR(i,s,e) for(int i=s;i&lt;=e;i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> db1(a) cout&lt;&lt;#a&lt;&lt;<span class="hljs-string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl</span><br><span class="hljs-type">int</span> N,M,K;<br>vector&lt;set&lt;<span class="hljs-type">int</span>&gt;&gt; vs;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;N;<br>    <span class="hljs-built_in">FOR</span>(i,<span class="hljs-number">1</span>,N)&#123;<br>        cin&gt;&gt;M;<br>        set&lt;<span class="hljs-type">int</span>&gt; tmp;<br>        <span class="hljs-built_in">FOR</span>(j,<span class="hljs-number">1</span>,M)&#123;<br>            <span class="hljs-type">int</span> t;<br>            cin&gt;&gt;t;<br>            tmp.<span class="hljs-built_in">insert</span>(t);<br>        &#125;<br>        vs.<span class="hljs-built_in">push_back</span>(tmp);<br>    &#125;<br>    cin&gt;&gt;K;<br>    set&lt;<span class="hljs-type">int</span>&gt; nt;<br>    <span class="hljs-built_in">FOR</span>(i,<span class="hljs-number">1</span>,K)&#123;<br>        <span class="hljs-type">int</span> a,b;<br>        cin&gt;&gt;a&gt;&gt;b;<br>        nt.<span class="hljs-built_in">clear</span>();<br>        a-=<span class="hljs-number">1</span>;<br>        b-=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> j:vs[a])&#123;<br>            nt.<span class="hljs-built_in">insert</span>(j);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> j:vs[b])&#123;<br>            nt.<span class="hljs-built_in">insert</span>(j);<br>        &#125;<br>        <span class="hljs-type">double</span> ans=<span class="hljs-number">100.0</span>*(vs[a].<span class="hljs-built_in">size</span>()+vs[b].<span class="hljs-built_in">size</span>()-nt.<span class="hljs-built_in">size</span>())/nt.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2f%\n&quot;</span>,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="代码（25-x2F-25）"><a href="#代码（25-x2F-25）" class="headerlink" title="代码（25&#x2F;25）"></a>代码（25&#x2F;25）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FOR(i,s,e) for(int i=s;i&lt;=e;i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> db1(a) cout&lt;&lt;#a&lt;&lt;<span class="hljs-string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> db3(a,i,j) cout&lt;&lt;#a&lt;&lt;<span class="hljs-string">&quot;[&quot;</span>&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot;][&quot;</span>&lt;&lt;j&lt;&lt;<span class="hljs-string">&quot;]=&quot;</span>&lt;&lt;a[i][j]&lt;&lt;endl</span><br><span class="hljs-type">int</span> N,M,K;<br><span class="hljs-type">int</span> a[<span class="hljs-number">55</span>][<span class="hljs-number">10005</span>];<br><span class="hljs-type">int</span> b[<span class="hljs-number">55</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;N;<br>    <span class="hljs-built_in">FOR</span>(i,<span class="hljs-number">1</span>,N)&#123;<br>        cin&gt;&gt;M;<br>        <span class="hljs-built_in">FOR</span>(j,<span class="hljs-number">1</span>,M)&#123;<br>            cin&gt;&gt;a[i][j];<br>        &#125;<br>        b[i]=M;<br>        <span class="hljs-built_in">sort</span>(a[i]+<span class="hljs-number">1</span>,a[i]+M+<span class="hljs-number">1</span>);<br>    &#125;<br>    cin&gt;&gt;K;<br>    <span class="hljs-built_in">FOR</span>(t,<span class="hljs-number">1</span>,K)&#123;<br>        <span class="hljs-type">int</span> n1,n2;<br>        cin&gt;&gt;n1&gt;&gt;n2;<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">1</span>,j=<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> nc=<span class="hljs-number">0</span>,nt=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(i&lt;=b[n1]&amp;&amp;j&lt;=b[n2])&#123;<br>            <span class="hljs-keyword">if</span>(a[n1][i]==a[n2][j])&#123;<br>                nc++;<br>                i++;<br>                <span class="hljs-keyword">while</span>(a[n1][i]==a[n1][i<span class="hljs-number">-1</span>])&#123;<br>                    i++;<br>                &#125;<br>                j++;<br>                <span class="hljs-keyword">while</span>(a[n2][j]==a[n2][j<span class="hljs-number">-1</span>])&#123;<br>                    j++;<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[n1][i]&lt;a[n2][j])&#123;<br>                i++;<br>                <span class="hljs-keyword">while</span>(a[n1][i]==a[n1][i<span class="hljs-number">-1</span>])&#123;<br>                    i++;<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                j++;<br>                <span class="hljs-keyword">while</span>(a[n2][j]==a[n2][j<span class="hljs-number">-1</span>])&#123;<br>                    j++;<br>                &#125;<br>            &#125;<br>            nt++;<br>        &#125;<br>        nt+=b[n1]+b[n2]+<span class="hljs-number">2</span>-i-j;<br>        <span class="hljs-type">double</span> ans=<span class="hljs-number">100.0</span>*nc/nt;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2f%\n&quot;</span>,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PTA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++数据结构实验第四次作业（2022--矿大）</title>
    <link href="/2022/06/21/C-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E7%AC%AC%E5%9B%9B%E6%AC%A1%E4%BD%9C%E4%B8%9A%EF%BC%882022-%E7%9F%BF%E5%A4%A7%EF%BC%89/"/>
    <url>/2022/06/21/C-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E7%AC%AC%E5%9B%9B%E6%AC%A1%E4%BD%9C%E4%B8%9A%EF%BC%882022-%E7%9F%BF%E5%A4%A7%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="问题-A-折半查找的次数"><a href="#问题-A-折半查找的次数" class="headerlink" title="问题 A: 折半查找的次数"></a>问题 A: 折半查找的次数</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给你一个无重复数的有序序列，如果采用折半查找的方式，对于给定的数，需要比较几次找到，请编程实现。</p><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>第一行是N，表示序列中数的个数，序列最长1000，第二行是一个有序序列，第三行是要找的数x。</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>如果找到x，输出折半比较的次数，否则输出NO。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">11</span><br><span class="hljs-attribute">5</span> <span class="hljs-number">13</span> <span class="hljs-number">19</span> <span class="hljs-number">21</span> <span class="hljs-number">37</span> <span class="hljs-number">56</span> <span class="hljs-number">64</span> <span class="hljs-number">75</span> <span class="hljs-number">80</span> <span class="hljs-number">88</span> <span class="hljs-number">92</span><br><span class="hljs-attribute">19</span><br></code></pre></td></tr></table></figure><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">2<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">halfsearch</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[],<span class="hljs-type">int</span> len,<span class="hljs-type">int</span> index,<span class="hljs-type">bool</span> flag)</span></span>&#123;<br><span class="hljs-type">int</span> count=<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> low=<span class="hljs-number">0</span>,high=len<span class="hljs-number">-1</span>,mid;<br><span class="hljs-type">int</span> tag=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>((low&lt;=high)&amp;&amp;tag==<span class="hljs-number">0</span>)&#123;<br>mid=(low+high)/<span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span> (low==high<span class="hljs-number">-1</span>)<br>tag++;<br><span class="hljs-keyword">if</span>(index&gt;arr[mid]&amp;&amp;flag||index&lt;arr[mid]&amp;&amp;!flag)&#123;<br>low=mid;<br>count++;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(index&lt;arr[mid]&amp;&amp;flag||index&gt;arr[mid]&amp;&amp;!flag)&#123;<br>high=mid;<br>count++;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>cout&lt;&lt;count&lt;&lt;endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br>cout&lt;&lt;<span class="hljs-string">&quot;NO&quot;</span>&lt;&lt;endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> n;<br>cin&gt;&gt;n;<br><span class="hljs-type">int</span> *arr=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n];<br><span class="hljs-type">int</span> k;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>cin&gt;&gt;k;<br>arr[i]=k;<br>&#125;<br><span class="hljs-type">int</span> m;<br>cin&gt;&gt;m;<br><span class="hljs-built_in">halfsearch</span>(arr,n,m,arr[n<span class="hljs-number">-1</span>]&gt;arr[<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="问题-B-二叉搜索树中的查找"><a href="#问题-B-二叉搜索树中的查找" class="headerlink" title="问题 B: 二叉搜索树中的查找"></a>问题 B: 二叉搜索树中的查找</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>给你一个数据序列，请构造一个二叉搜索树，然后计算出找到给定数据需比较的次数。</p><h4 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h4><p>第一行是N，表示序列中数的个数，序列最长1000，第二行是一个数据序列，第三行是要找的数x。</p><h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><p>如果找到x，输出比较的次数，没找到则输出NO。</p><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span><br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">4<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TreeNode</span>&#123;<br><span class="hljs-type">int</span> data;<br>TreeNode* left;<br>TreeNode* right;<br><span class="hljs-built_in">TreeNode</span>(<span class="hljs-type">int</span> n,TreeNode* l=<span class="hljs-literal">NULL</span>,TreeNode* r=<span class="hljs-literal">NULL</span>):<span class="hljs-built_in">data</span>(n),<span class="hljs-built_in">left</span>(l),<span class="hljs-built_in">right</span>(r)&#123;&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tree</span>&#123;<br><span class="hljs-keyword">private</span>:<br>TreeNode* root;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Tree</span>(<span class="hljs-type">int</span> n)&#123;<br>root=<span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(n);<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(<span class="hljs-type">int</span> n,TreeNode* &amp;ptr)</span></span>&#123;<br><span class="hljs-keyword">if</span>(ptr==<span class="hljs-literal">NULL</span>)&#123;<br>ptr=<span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(n);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n&lt;ptr-&gt;data)&#123;<br><span class="hljs-built_in">Insert</span>(n,ptr-&gt;left);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n&gt;ptr-&gt;data)&#123;<br><span class="hljs-built_in">Insert</span>(n,ptr-&gt;right);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br><span class="hljs-built_in">Insert</span>(n,root);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Find</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>TreeNode* ptr=root;<br><span class="hljs-type">int</span> count=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(n!=ptr-&gt;data)&#123;<br><span class="hljs-keyword">if</span>(n&lt;ptr-&gt;data)&#123;<br>ptr=ptr-&gt;left;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>ptr=ptr-&gt;right;<br>&#125;<br><span class="hljs-keyword">if</span>(ptr==<span class="hljs-literal">NULL</span>)&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;NO&quot;</span>&lt;&lt;endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>count++;<br>&#125;<br>cout&lt;&lt;count&lt;&lt;endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> n;<br>cin&gt;&gt;n;<br><span class="hljs-type">int</span> k;<br>cin&gt;&gt;k;<br><span class="hljs-function">Tree <span class="hljs-title">tree</span><span class="hljs-params">(k)</span></span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>cin&gt;&gt;k;<br>tree.<span class="hljs-built_in">Insert</span>(k);<br>&#125; <br><span class="hljs-type">int</span> m;<br>cin&gt;&gt;m;<br>tree.<span class="hljs-built_in">Find</span>(m);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="问题-C-有向图的最短路径长度"><a href="#问题-C-有向图的最短路径长度" class="headerlink" title="问题 C: 有向图的最短路径长度"></a>问题 C: 有向图的最短路径长度</h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p>已知一个有向图，每个边都有一个正整数表示边长，请编程求出其中两个顶点间的最短路径长度。</p><h4 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h4><p>第一行是M、N，分别表示顶点数和有向边数（0&lt;M，N&lt;&#x3D;100》），紧接着N行的每一行是X、Y、H，分别表示有向边的起点和终点以及边长。最后一行是要求其最短路径的两个顶点。</p><h4 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h4><p>相应两个顶点的最短路径值。</p><h4 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-number">5</span> <span class="hljs-number">7</span><br><span class="hljs-variable">A</span> <span class="hljs-variable">B</span> <span class="hljs-number">10</span><br><span class="hljs-variable">B</span> <span class="hljs-built_in">C</span> <span class="hljs-number">50</span><br><span class="hljs-variable">A</span> <span class="hljs-built_in">E</span> <span class="hljs-number">100</span><br><span class="hljs-variable">A</span> <span class="hljs-built_in">D</span> <span class="hljs-number">30</span><br><span class="hljs-built_in">C</span> <span class="hljs-built_in">E</span> <span class="hljs-number">10</span><br><span class="hljs-built_in">D</span> <span class="hljs-built_in">C</span> <span class="hljs-number">20</span><br><span class="hljs-built_in">D</span> <span class="hljs-built_in">E</span> <span class="hljs-number">60</span><br><span class="hljs-variable">A</span> <span class="hljs-built_in">E</span><br></code></pre></td></tr></table></figure><h4 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">60<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX 1000000</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Matrix</span> &#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span>** ma;<br><span class="hljs-type">int</span> n;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Matrix</span>(<span class="hljs-type">int</span> n):<span class="hljs-built_in">n</span>(n) &#123;<br>ma=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>*[n];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++) &#123;<br>ma[i]=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;n; j++) &#123;<br>ma[i][j]=MAX;<br><span class="hljs-keyword">if</span>(i==j) ma[i][j]=<span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(<span class="hljs-type">char</span> row,<span class="hljs-type">char</span> col,<span class="hljs-type">int</span> data)</span> </span>&#123;<br>row=(<span class="hljs-type">int</span>)row<span class="hljs-number">-65</span>;<br>col=(<span class="hljs-type">int</span>)col<span class="hljs-number">-65</span>;<br>ma[row][col]=data;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">FindMin</span><span class="hljs-params">(<span class="hljs-type">char</span> row,<span class="hljs-type">char</span> col)</span> </span>&#123;<br>row=(<span class="hljs-type">int</span>)row<span class="hljs-number">-65</span>;<br>col=(<span class="hljs-type">int</span>)col<span class="hljs-number">-65</span>;<br><span class="hljs-type">bool</span>* S=<span class="hljs-keyword">new</span> <span class="hljs-type">bool</span>[n];<br><span class="hljs-type">int</span>* dist=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n];<br><span class="hljs-type">int</span>* path=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++) &#123;<br>S[i]=<span class="hljs-literal">false</span>;<br>dist[i]=ma[row][i];<br><span class="hljs-keyword">if</span>(i!=row&amp;&amp;dist[i]&lt;MAX) path[i]=row;<br><span class="hljs-keyword">else</span> path[i]=<span class="hljs-number">-1</span>;<br>&#125;<br>S[row]=<span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n<span class="hljs-number">-1</span>; i++) &#123;<br><span class="hljs-type">int</span> min=MAX;<br><span class="hljs-type">int</span> u=row;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;n; j++) &#123;<br><span class="hljs-keyword">if</span>(S[j]==<span class="hljs-literal">false</span>&amp;&amp;dist[j]&lt;min) &#123;<br>u=j;<br>min=dist[j];<br>&#125;<br>&#125;<br>S[u]=<span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>; k&lt;n; k++) &#123;<br><span class="hljs-type">int</span> w=ma[u][k];<br><span class="hljs-keyword">if</span>(S[k]==<span class="hljs-literal">false</span>&amp;&amp;w&lt;MAX&amp;&amp;dist[u]+w&lt;dist[k]) &#123;<br>dist[k]=dist[u]+w;<br>path[k]=u;<br>&#125;<br>&#125;<br>&#125;<br>cout&lt;&lt;dist[col]&lt;&lt;endl;<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> m,n;<br>cin&gt;&gt;m&gt;&gt;n;<br><span class="hljs-function">Matrix <span class="hljs-title">matrix</span><span class="hljs-params">(m)</span></span>;<br><span class="hljs-type">char</span> s,t;<br><span class="hljs-type">int</span> data;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++) &#123;<br>cin&gt;&gt;s&gt;&gt;t&gt;&gt;data;<br>matrix.<span class="hljs-built_in">Insert</span>(s,t,data);<br>&#125;<br>cin&gt;&gt;s&gt;&gt;t;<br>matrix.<span class="hljs-built_in">FindMin</span>(s,t);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="问题-D-有向图的最短路径"><a href="#问题-D-有向图的最短路径" class="headerlink" title="问题 D: 有向图的最短路径"></a>问题 D: 有向图的最短路径</h3><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p>已知一个有向图，每个边都有一个正整数表示边长，请编程求出其中两个顶点间的最短路径长度。</p><h4 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h4><p>第一行是M、N，分别表示顶点数和有向边数（0&lt;M，N&lt;&#x3D;100》），紧接着N行的每一行是X、Y、H，分别表示有向边的起点和终点以及边长。最后一行是要求其最短路径的两个顶点。</p><h4 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h4><p>相应两个顶点的最短路径经过的顶点序列。</p><h4 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-number">5</span> <span class="hljs-number">7</span><br><span class="hljs-variable">A</span> <span class="hljs-variable">B</span> <span class="hljs-number">10</span><br><span class="hljs-variable">B</span> <span class="hljs-built_in">C</span> <span class="hljs-number">50</span><br><span class="hljs-variable">A</span> <span class="hljs-built_in">E</span> <span class="hljs-number">100</span><br><span class="hljs-variable">A</span> <span class="hljs-built_in">D</span> <span class="hljs-number">30</span><br><span class="hljs-built_in">C</span> <span class="hljs-built_in">E</span> <span class="hljs-number">10</span><br><span class="hljs-built_in">D</span> <span class="hljs-built_in">C</span> <span class="hljs-number">20</span><br><span class="hljs-built_in">D</span> <span class="hljs-built_in">E</span> <span class="hljs-number">60</span><br><span class="hljs-variable">A</span> <span class="hljs-built_in">E</span><br></code></pre></td></tr></table></figure><h4 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">A</span> <span class="hljs-built_in">D</span> <span class="hljs-built_in">C</span> <span class="hljs-built_in">E</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX 1000000</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Matrix</span> &#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span>** ma;<br><span class="hljs-type">int</span> n;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Matrix</span>(<span class="hljs-type">int</span> n):<span class="hljs-built_in">n</span>(n) &#123;<br>ma=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>*[n];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++) &#123;<br>ma[i]=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;n; j++) &#123;<br>ma[i][j]=MAX;<br><span class="hljs-keyword">if</span>(i==j) ma[i][j]=<span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(<span class="hljs-type">char</span> row,<span class="hljs-type">char</span> col,<span class="hljs-type">int</span> data)</span> </span>&#123;<br>row=(<span class="hljs-type">int</span>)row<span class="hljs-number">-65</span>;<br>col=(<span class="hljs-type">int</span>)col<span class="hljs-number">-65</span>;<br>ma[row][col]=data;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">FindMin</span><span class="hljs-params">(<span class="hljs-type">char</span> row,<span class="hljs-type">char</span> col)</span> </span>&#123;<br>row=(<span class="hljs-type">int</span>)row<span class="hljs-number">-65</span>;<br>col=(<span class="hljs-type">int</span>)col<span class="hljs-number">-65</span>;<br><span class="hljs-type">bool</span>* S=<span class="hljs-keyword">new</span> <span class="hljs-type">bool</span>[n];<br><span class="hljs-type">int</span>* dist=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n];<br><span class="hljs-type">int</span>* path=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++) &#123;<br>S[i]=<span class="hljs-literal">false</span>;<br>dist[i]=ma[row][i];<br><span class="hljs-keyword">if</span>(i!=row&amp;&amp;dist[i]&lt;MAX) path[i]=row;<br><span class="hljs-keyword">else</span> path[i]=<span class="hljs-number">-1</span>;<br>&#125;<br>S[row]=<span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n<span class="hljs-number">-1</span>; i++) &#123;<br><span class="hljs-type">int</span> min=MAX;<br><span class="hljs-type">int</span> u=row;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;n; j++) &#123;<br><span class="hljs-keyword">if</span>(S[j]==<span class="hljs-literal">false</span>&amp;&amp;dist[j]&lt;min) &#123;<br>u=j;<br>min=dist[j];<br>&#125;<br>&#125;<br>S[u]=<span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>; k&lt;n; k++) &#123;<br><span class="hljs-type">int</span> w=ma[u][k];<br><span class="hljs-keyword">if</span>(S[k]==<span class="hljs-literal">false</span>&amp;&amp;w&lt;MAX&amp;&amp;dist[u]+w&lt;dist[k]) &#123;<br>dist[k]=dist[u]+w;<br>path[k]=u;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//cout&lt;&lt;dist[col]&lt;&lt;endl;</span><br><span class="hljs-comment">//展示路径</span><br><span class="hljs-type">int</span>* d=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n];<br><span class="hljs-type">int</span> i=col;<br><span class="hljs-keyword">if</span>(i!=row) &#123;<br><span class="hljs-type">int</span> j=i,k=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(j!=row) &#123;<br>d[k++]=j;<br>j=path[j];<br>&#125;<br>cout&lt;&lt;(<span class="hljs-type">char</span>)(row+<span class="hljs-number">65</span>)&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br><span class="hljs-keyword">while</span>(k&gt;<span class="hljs-number">0</span>) &#123;<br>cout&lt;&lt;(<span class="hljs-type">char</span>)(d[--k]+<span class="hljs-number">65</span>)&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>&#125;<br>cout&lt;&lt;endl;<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> m,n;<br>cin&gt;&gt;m&gt;&gt;n;<br><span class="hljs-function">Matrix <span class="hljs-title">matrix</span><span class="hljs-params">(m)</span></span>;<br><span class="hljs-type">char</span> s,t;<br><span class="hljs-type">int</span> data;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++) &#123;<br>cin&gt;&gt;s&gt;&gt;t&gt;&gt;data;<br>matrix.<span class="hljs-built_in">Insert</span>(s,t,data);<br>&#125;<br>cin&gt;&gt;s&gt;&gt;t;<br>matrix.<span class="hljs-built_in">FindMin</span>(s,t);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="问题-E-5个数的从大到小排序"><a href="#问题-E-5个数的从大到小排序" class="headerlink" title="问题 E: 5个数的从大到小排序"></a>问题 E: 5个数的从大到小排序</h3><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><p>数学课上，老师公布了一个小组的5名同学的成绩，你能编程把成绩从大到小排序吗，以便老师知道考试名次？</p><h4 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h4><p>5个整数，用空格间隔开。</p><h4 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h4><p>从大到小的5个数，中间用空格间隔。</p><h4 id="样例输入-4"><a href="#样例输入-4" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">86 </span><span class="hljs-number">78</span> <span class="hljs-number">99</span> <span class="hljs-number">100</span> <span class="hljs-number">66</span><br></code></pre></td></tr></table></figure><h4 id="样例输出-4"><a href="#样例输出-4" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">100 </span><span class="hljs-number">99</span> <span class="hljs-number">86</span> <span class="hljs-number">78</span> <span class="hljs-number">66</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-type">int</span> s[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (l&lt; r)<br>&#123;      <br><span class="hljs-type">int</span> i = l, j = r, x = s[l];<br><span class="hljs-keyword">while</span> (i &lt; j)<br>&#123;<br><span class="hljs-keyword">while</span>(i &lt; j &amp;&amp; s[j]&lt;= x) <span class="hljs-comment">// 从右向左找第一个小于x的数</span><br>j--; <br><span class="hljs-keyword">if</span>(i &lt; j)<br>s[i++] = s[j];<br><span class="hljs-keyword">while</span>(i &lt; j &amp;&amp; s[i]&gt; x) <span class="hljs-comment">// 从左向右找第一个大于等于x的数</span><br>i++; <br><span class="hljs-keyword">if</span>(i &lt; j)<br>s[j--] = s[i];<br>&#125;<br>s[i] = x;<br><span class="hljs-built_in">quickSort</span>(s, l, i - <span class="hljs-number">1</span>); <span class="hljs-comment">// 递归调用</span><br><span class="hljs-built_in">quickSort</span>(s, i + <span class="hljs-number">1</span>, r);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">5</span>];<br><span class="hljs-type">int</span> k;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)&#123;<br>cin&gt;&gt;k;<br>arr[i]=k;<br>&#125;<br><span class="hljs-built_in">quickSort</span>(arr,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)&#123;<br>cout&lt;&lt;arr[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><h3 id="问题-F-病人排队"><a href="#问题-F-病人排队" class="headerlink" title="问题 F: 病人排队"></a>问题 F: 病人排队</h3><h4 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h4><p><strong>病人登记看病，编写一个程序，将登记的病人按照以下原则排出看病的先后顺序：</strong></p><p><strong>1.老年人（年龄 &gt;&#x3D; 60岁）比非老年人优先看病。</strong></p><p><strong>2.老年人按年龄从大到小的顺序看病，年龄相同的按登记的先后顺序排序。</strong></p><p><strong>3.非老年人按登记的先后顺序看病。</strong></p><h4 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h4><p>第1行，输入一个小于100的正整数，表示病人的个数；</p><p>后面按照病人登记的先后顺序，每行输入一个病人的信息，包括：一个长度小于10的字符串表示病人的ID（每个病人的ID各不相同且只含数字和字母），一个整数表示病人的年龄，中间用单个空格隔开。</p><h4 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h4><p>按排好的看病顺序输出病人的ID，每行一个。</p><h4 id="输入-6"><a href="#输入-6" class="headerlink" title="输入"></a>输入</h4><p>第1行，输入一个小于100的正整数，表示病人的个数；</p><p>后面按照病人登记的先后顺序，每行输入一个病人的信息，包括：一个长度小于10的字符串表示病人的ID（每个病人的ID各不相同且只含数字和字母），一个整数表示病人的年龄，中间用单个空格隔开。</p><h4 id="输出-6"><a href="#输出-6" class="headerlink" title="输出"></a>输出</h4><p>按排好的看病顺序输出病人的ID，每行一个。</p><h4 id="样例输入-5"><a href="#样例输入-5" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">021075 </span><span class="hljs-number">40</span><br><span class="hljs-symbol">004003 </span><span class="hljs-number">15</span><br><span class="hljs-symbol">010158 </span><span class="hljs-number">67</span><br><span class="hljs-symbol">021033 </span><span class="hljs-number">75</span><br><span class="hljs-symbol">102012 </span><span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><h4 id="样例输出-5"><a href="#样例输出-5" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">021033<br>010158<br>021075<br>004003<br>102012<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> intMax 101</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> charMax 11</span><br> <br><span class="hljs-comment">//定义病人的结构体 </span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">patient</span>&#123;<br><span class="hljs-type">char</span> name[charMax];<br><span class="hljs-type">int</span> age;<br>&#125;patient;<br> <br>patient p[intMax];<span class="hljs-comment">//声明一个数组存放病人 </span><br><span class="hljs-type">int</span> n;<span class="hljs-comment">//病人个数 </span><br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">input</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">output</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">input</span>();<br><span class="hljs-built_in">sort</span>();<br><span class="hljs-built_in">output</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br> <br><span class="hljs-comment">//输入</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">input</span><span class="hljs-params">()</span></span>&#123;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n; i++)&#123;<br>cin &gt;&gt; p[i].name &gt;&gt; p[i].age; <br>&#125;<br>&#125;<br> <br><span class="hljs-comment">//病人排序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sort</span><span class="hljs-params">()</span></span>&#123;<br>patient temp ;<br><span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<span class="hljs-comment">//交换的老年人的个数 </span><br><span class="hljs-comment">//1.先把老人都提到前面 (结果：老人和非老人各自之间都是按登记的顺序)</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++)&#123;<br><span class="hljs-keyword">if</span>(p[i].age&gt;=<span class="hljs-number">60</span>)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i;j&gt;count;j--)&#123;<br>temp = p[j];<br>p[j] = p[j<span class="hljs-number">-1</span>];<br>p[j<span class="hljs-number">-1</span>] = temp;<br>&#125;<br>count++; <br>&#125; <br>&#125;<br><span class="hljs-comment">//cout &lt;&lt; &quot;count = &quot; &lt;&lt;count&lt;&lt;endl;</span><br><span class="hljs-comment">//2.再把前面的老人按年龄排序</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; count ;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j&lt;count - <span class="hljs-number">1</span> - i;j++)&#123;<br><span class="hljs-keyword">if</span>(p[j].age &lt; p[j+<span class="hljs-number">1</span>].age)&#123;<br>temp = p[j];<br>p[j] = p[j+<span class="hljs-number">1</span>];<br>p[j+<span class="hljs-number">1</span>] = temp;<br>&#125;<br>&#125;<br>&#125; <br><br>&#125; <br> <br><span class="hljs-comment">//输出</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">output</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++)&#123;<br>cout &lt;&lt; p[i].name &lt;&lt; endl;<br>&#125;<br>&#125; <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++数据结构实验第三次作业（2022--矿大）</title>
    <link href="/2022/06/21/C-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E7%AC%AC%E4%B8%89%E6%AC%A1%E4%BD%9C%E4%B8%9A%EF%BC%882022-%E7%9F%BF%E5%A4%A7%EF%BC%89/"/>
    <url>/2022/06/21/C-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E7%AC%AC%E4%B8%89%E6%AC%A1%E4%BD%9C%E4%B8%9A%EF%BC%882022-%E7%9F%BF%E5%A4%A7%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="问题-A-任意二叉树的层次遍历"><a href="#问题-A-任意二叉树的层次遍历" class="headerlink" title="问题 A: 任意二叉树的层次遍历"></a>问题 A: 任意二叉树的层次遍历</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>有若干个节点，每个节点上都有编号，把这些节点随意地构成二叉树，请编程输出该二叉树的层次遍历序列。</p><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>第一行是n（n小于100）,表示有n个节点，每个节点按从1到n依次编号。第一行后有n行，每行三个正整数i、l、r，分别表示节点i及对应的左右孩子的编号，如果不存在孩子则以-1表示。三个整数之间用一个空格隔开。</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>输出该二叉数的层次遍历序列。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">1</span> -<span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span>-<span class="hljs-number">1</span> -<span class="hljs-number">1</span><br><span class="hljs-symbol">4 </span>-<span class="hljs-number">1</span> -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>&#123;<br><span class="hljs-type">int</span> left,right;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">(Node ntr[],<span class="hljs-type">int</span> k)</span></span>&#123;<br>cout&lt;&lt;k&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br><span class="hljs-keyword">if</span>(ntr[k].left!=<span class="hljs-number">-1</span>) <span class="hljs-built_in">preOrder</span>(ntr,ntr[k].left);<br><span class="hljs-keyword">if</span>(ntr[k].right!=<span class="hljs-number">-1</span>) <span class="hljs-built_in">preOrder</span>(ntr,ntr[k].right);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">levelOrder</span><span class="hljs-params">(Node ntr[],<span class="hljs-type">int</span> k)</span></span>&#123;<br>queue&lt;<span class="hljs-type">int</span>&gt; Q;<br>Q.<span class="hljs-built_in">push</span>(k);<br><span class="hljs-keyword">while</span>(!Q.<span class="hljs-built_in">empty</span>())&#123;<br>cout&lt;&lt;Q.<span class="hljs-built_in">front</span>()&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br><span class="hljs-keyword">if</span>(ntr[Q.<span class="hljs-built_in">front</span>()].left!=<span class="hljs-number">-1</span>) Q.<span class="hljs-built_in">push</span>(ntr[Q.<span class="hljs-built_in">front</span>()].left);<br><span class="hljs-keyword">if</span>(ntr[Q.<span class="hljs-built_in">front</span>()].right!=<span class="hljs-number">-1</span>) Q.<span class="hljs-built_in">push</span>(ntr[Q.<span class="hljs-built_in">front</span>()].right);<br>Q.<span class="hljs-built_in">pop</span>();<br>&#125;<br>cout&lt;&lt;endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Show</span><span class="hljs-params">(Node ntr[],<span class="hljs-type">int</span> root[],<span class="hljs-type">int</span> n)</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">if</span>(root[i])&#123;<br><span class="hljs-built_in">levelOrder</span>(ntr,i);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> n;<br>cin&gt;&gt;n;<br>Node* ntr=<span class="hljs-keyword">new</span> Node[n+<span class="hljs-number">1</span>];<br><span class="hljs-type">int</span>* root=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n+<span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) root[i]=<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> x,y,z;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;<br>ntr[x].left=y;<br>ntr[x].right=z;<br><span class="hljs-keyword">if</span>(y!=<span class="hljs-number">-1</span>)root[y]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(z!=<span class="hljs-number">-1</span>)root[z]=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-built_in">Show</span>(ntr,root,n);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="问题-B-小根堆的判定"><a href="#问题-B-小根堆的判定" class="headerlink" title="问题 B: 小根堆的判定"></a>问题 B: 小根堆的判定</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>堆是以线性连续方式存储的完全二叉树，小根堆的每一个元素都不大于其左右孩子，现在给你n个完全二叉树数组存储序列，请编程判定相应完全二叉树数组存储序列是否为小根堆。</p><h4 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h4><p>第一行n（n&lt;100），表示有n组测试用例。后边的n行，每一行都是相应完全二叉树数组存储序列(序列最长为100)。</p><h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><p>对应相应完全二叉树数组存储序列，判定为小根堆的输出True，否则输出False。</p><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">2</span><br><span class="hljs-symbol">30 </span><span class="hljs-number">26</span> <span class="hljs-number">27</span> <span class="hljs-number">88</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-literal">False</span><br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">judge</span><span class="hljs-params">(<span class="hljs-type">int</span> s[],<span class="hljs-type">int</span> count)</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;count;i++)&#123;<br><span class="hljs-keyword">if</span>((<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>)&lt;count&amp;&amp;s[i]&gt;s[<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>]||(<span class="hljs-number">2</span>*i+<span class="hljs-number">2</span>)&lt;count&amp;&amp;s[i]&gt;s[<span class="hljs-number">2</span>*i+<span class="hljs-number">2</span>]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> n;<br>cin&gt;&gt;n;<br><span class="hljs-type">int</span> test[<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> k,count;<br><span class="hljs-type">int</span> ans[n];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>count=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(cin&gt;&gt;k)&#123;<br>test[count++]=k;<br><span class="hljs-keyword">if</span>(cin.<span class="hljs-built_in">get</span>()== <span class="hljs-string">&#x27;\n&#x27;</span>) <span class="hljs-keyword">break</span>;<br>&#125;<br>ans[i]=<span class="hljs-built_in">judge</span>(test,count);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br><span class="hljs-keyword">if</span>(ans[i]==<span class="hljs-number">0</span>)&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;False&quot;</span>&lt;&lt;endl;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ans[i]==<span class="hljs-number">1</span>)&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;True&quot;</span>&lt;&lt;endl;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="问题-C-最小堆的形成"><a href="#问题-C-最小堆的形成" class="headerlink" title="问题 C: 最小堆的形成"></a>问题 C: 最小堆的形成</h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p>现在给你n个结点的完全二叉树数组存储序列，请编程调整为最小堆，并输出相应最小堆的存储序列。</p><h4 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h4><p>第一行是n，第二行是n个结点的完全二叉树数组存储序列。</p><h4 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h4><p>输出相应最小堆的存储序列。</p><h4 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">8</span><br><span class="hljs-symbol">53 </span><span class="hljs-number">17</span> <span class="hljs-number">78</span> <span class="hljs-number">23</span> <span class="hljs-number">45</span> <span class="hljs-number">65</span> <span class="hljs-number">87</span> <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><h4 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">9 </span><span class="hljs-number">17</span> <span class="hljs-number">65</span> <span class="hljs-number">23</span> <span class="hljs-number">45</span> <span class="hljs-number">78</span> <span class="hljs-number">87</span> <span class="hljs-number">53</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">siftUp</span><span class="hljs-params">(<span class="hljs-type">int</span> heap[],<span class="hljs-type">int</span> start)</span></span>&#123;<br><span class="hljs-type">int</span> j=start,i=(j<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>,temp=heap[j];<br><span class="hljs-keyword">while</span>(j&gt;<span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">if</span>(heap[i]&lt;=temp) <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">else</span>&#123;<br>heap[j]=heap[i];j=i;i=(i<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>;<br>&#125;<br>&#125;<br>heap[j]=temp;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> n;<br>cin&gt;&gt;n;<br><span class="hljs-type">int</span> heap[n];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>cin&gt;&gt;heap[i];<br><span class="hljs-built_in">siftUp</span>(heap,i);<br>&#125; <br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>cout&lt;&lt;heap[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="问题-D-无向图的深度优先搜索"><a href="#问题-D-无向图的深度优先搜索" class="headerlink" title="问题 D: 无向图的深度优先搜索"></a>问题 D: 无向图的深度优先搜索</h3><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p>已知一个无向图G的顶点和边，顶点从0依次编号，现在需要深度优先搜索，访问任一邻接顶点时编号小的顶点优先，请编程输出图G的深度优先搜索序列。</p><h4 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h4><p>第一行是整数m和n（1&lt;m,n&lt;100），分别代表顶点数和边数。后边n行，每行2个数，分别表示一个边的两个顶点。</p><h4 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h4><p>该图从0号顶点开始的深度优先搜索序列。</p><h4 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">0</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h4 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span> </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Graph</span>&#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span>** edge;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Graph</span>(<span class="hljs-type">int</span> n):<span class="hljs-built_in">n</span>(n)&#123;<br>edge=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>*[n];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>edge[i]=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)&#123;<br><span class="hljs-keyword">if</span>(i==j)edge[i][j]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span> edge[i][j]=<span class="hljs-number">-1</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insertEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> v1,<span class="hljs-type">int</span> v2)</span></span>&#123;<br>edge[v1][v2]=<span class="hljs-number">1</span>;<br>edge[v2][v1]=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getFirst</span><span class="hljs-params">(<span class="hljs-type">int</span> v1)</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br><span class="hljs-keyword">if</span>(edge[v1][i]==<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">return</span> i;<br>&#125; <br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getNext</span><span class="hljs-params">(<span class="hljs-type">int</span> v1,<span class="hljs-type">int</span> v2)</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=v2+<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br><span class="hljs-keyword">if</span>(edge[v1][i]==<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">return</span> i;<br>&#125; <br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(<span class="hljs-type">int</span> v,<span class="hljs-type">bool</span> visited[])</span></span>&#123;<br>cout&lt;&lt;v&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>visited[v]=<span class="hljs-literal">true</span>;<br><span class="hljs-type">int</span> w=<span class="hljs-built_in">getFirst</span>(v);<br><span class="hljs-keyword">while</span>(w!=<span class="hljs-number">-1</span>)&#123;<br><span class="hljs-keyword">if</span>(visited[w]==<span class="hljs-literal">false</span>)<span class="hljs-built_in">DFS</span>(w,visited);<br>w=<span class="hljs-built_in">getNext</span>(v,w); <br>&#125;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(<span class="hljs-type">int</span> v)</span></span>&#123;<br><span class="hljs-type">bool</span>* visited=<span class="hljs-keyword">new</span> <span class="hljs-type">bool</span>[n];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) visited[i]=<span class="hljs-literal">false</span>;<br><span class="hljs-built_in">DFS</span>(v,visited);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BFS</span><span class="hljs-params">(<span class="hljs-type">int</span> v)</span></span>&#123;<br><span class="hljs-type">bool</span>* visited=<span class="hljs-keyword">new</span> <span class="hljs-type">bool</span>[n];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)visited[i]=<span class="hljs-literal">false</span>;<br>cout&lt;&lt;v&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>visited[v]=<span class="hljs-literal">true</span>;<br>queue&lt;<span class="hljs-type">int</span>&gt; Q;<br>Q.<span class="hljs-built_in">push</span>(v);<br><span class="hljs-keyword">while</span>(!Q.<span class="hljs-built_in">empty</span>())&#123;<br>v=Q.<span class="hljs-built_in">front</span>();<br>Q.<span class="hljs-built_in">pop</span>();<br><span class="hljs-type">int</span> w=<span class="hljs-built_in">getFirst</span>(v);<br><span class="hljs-keyword">while</span>(w!=<span class="hljs-number">-1</span>)&#123;<br><span class="hljs-keyword">if</span>(visited[w]==<span class="hljs-literal">false</span>)&#123;<br>cout&lt;&lt;w&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>visited[w]=<span class="hljs-literal">true</span>;<br>Q.<span class="hljs-built_in">push</span>(w);<br>&#125;<br>w=<span class="hljs-built_in">getNext</span>(v,w);<br>&#125;<br>&#125;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> n,k;<br>cin&gt;&gt;n&gt;&gt;k;<br><span class="hljs-function">Graph <span class="hljs-title">G</span><span class="hljs-params">(n)</span></span>;<br><span class="hljs-type">int</span> v1,v2;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)&#123;<br>cin&gt;&gt;v1&gt;&gt;v2;<br>G.<span class="hljs-built_in">insertEdge</span>(v1,v2);<br>&#125;<br>G.<span class="hljs-built_in">DFS</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//G.BFS(0);</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="问题-E-无向图的广度优先搜索"><a href="#问题-E-无向图的广度优先搜索" class="headerlink" title="问题 E: 无向图的广度优先搜索"></a>问题 E: 无向图的广度优先搜索</h3><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><p>已知一个无向图G的顶点和边，顶点从0依次编号，现在需要广度优先搜索，访问任一邻接顶点时编号小的顶点优先，请编程输出图G的广度优先搜索序列。</p><h4 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h4><p>第一行是整数m和n（1&lt;m,n&lt;100），分别代表顶点数和边数。后边n行，每行2个数，分别表示一个边的两个顶点。</p><h4 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h4><p>该图从0号顶点开始的广度优先搜索序列。</p><h4 id="样例输入-4"><a href="#样例输入-4" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">0</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h4 id="样例输出-4"><a href="#样例输出-4" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span> </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Graph</span>&#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span>** edge;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Graph</span>(<span class="hljs-type">int</span> n):<span class="hljs-built_in">n</span>(n)&#123;<br>edge=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>*[n];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>edge[i]=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)&#123;<br><span class="hljs-keyword">if</span>(i==j)edge[i][j]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span> edge[i][j]=<span class="hljs-number">-1</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insertEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> v1,<span class="hljs-type">int</span> v2)</span></span>&#123;<br>edge[v1][v2]=<span class="hljs-number">1</span>;<br>edge[v2][v1]=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getFirst</span><span class="hljs-params">(<span class="hljs-type">int</span> v1)</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br><span class="hljs-keyword">if</span>(edge[v1][i]==<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">return</span> i;<br>&#125; <br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getNext</span><span class="hljs-params">(<span class="hljs-type">int</span> v1,<span class="hljs-type">int</span> v2)</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=v2+<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br><span class="hljs-keyword">if</span>(edge[v1][i]==<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">return</span> i;<br>&#125; <br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(<span class="hljs-type">int</span> v,<span class="hljs-type">bool</span> visited[])</span></span>&#123;<br>cout&lt;&lt;v&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>visited[v]=<span class="hljs-literal">true</span>;<br><span class="hljs-type">int</span> w=<span class="hljs-built_in">getFirst</span>(v);<br><span class="hljs-keyword">while</span>(w!=<span class="hljs-number">-1</span>)&#123;<br><span class="hljs-keyword">if</span>(visited[w]==<span class="hljs-literal">false</span>)<span class="hljs-built_in">DFS</span>(w,visited);<br>w=<span class="hljs-built_in">getNext</span>(v,w); <br>&#125;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(<span class="hljs-type">int</span> v)</span></span>&#123;<br><span class="hljs-type">bool</span>* visited=<span class="hljs-keyword">new</span> <span class="hljs-type">bool</span>[n];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) visited[i]=<span class="hljs-literal">false</span>;<br><span class="hljs-built_in">DFS</span>(v,visited);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BFS</span><span class="hljs-params">(<span class="hljs-type">int</span> v)</span></span>&#123;<br><span class="hljs-type">bool</span>* visited=<span class="hljs-keyword">new</span> <span class="hljs-type">bool</span>[n];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)visited[i]=<span class="hljs-literal">false</span>;<br>cout&lt;&lt;v&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>visited[v]=<span class="hljs-literal">true</span>;<br>queue&lt;<span class="hljs-type">int</span>&gt; Q;<br>Q.<span class="hljs-built_in">push</span>(v);<br><span class="hljs-keyword">while</span>(!Q.<span class="hljs-built_in">empty</span>())&#123;<br>v=Q.<span class="hljs-built_in">front</span>();<br>Q.<span class="hljs-built_in">pop</span>();<br><span class="hljs-type">int</span> w=<span class="hljs-built_in">getFirst</span>(v);<br><span class="hljs-keyword">while</span>(w!=<span class="hljs-number">-1</span>)&#123;<br><span class="hljs-keyword">if</span>(visited[w]==<span class="hljs-literal">false</span>)&#123;<br>cout&lt;&lt;w&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>visited[w]=<span class="hljs-literal">true</span>;<br>Q.<span class="hljs-built_in">push</span>(w);<br>&#125;<br>w=<span class="hljs-built_in">getNext</span>(v,w);<br>&#125;<br>&#125;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> n,k;<br>cin&gt;&gt;n&gt;&gt;k;<br><span class="hljs-function">Graph <span class="hljs-title">G</span><span class="hljs-params">(n)</span></span>;<br><span class="hljs-type">int</span> v1,v2;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)&#123;<br>cin&gt;&gt;v1&gt;&gt;v2;<br>G.<span class="hljs-built_in">insertEdge</span>(v1,v2);<br>&#125;<br><span class="hljs-comment">//G.DFS(0);</span><br>G.<span class="hljs-built_in">BFS</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="问题-F-最小生成树"><a href="#问题-F-最小生成树" class="headerlink" title="问题 F: 最小生成树"></a>问题 F: 最小生成树</h3><h4 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h4><p>已知一个无向图G的顶点和边，顶点从0依次编号，请编程输出图G的最小生成树对应的边权之和。</p><h4 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h4><p>第一行是整数m和n（1&lt;m,n&lt;100），分别代表顶点数和边数。后边n行，每行3个数，分别表示一个边的两个顶点和该边的权值。</p><h4 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h4><p>最小生成树对应的边权之和。</p><h4 id="样例输入-5"><a href="#样例输入-5" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">6</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">2</span> <span class="hljs-number">9</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">12</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">10</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h4 id="样例输出-5"><a href="#样例输出-5" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">18<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Max 100000</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UFset</span>&#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span>* parent;<br><span class="hljs-type">int</span> size;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">UFset</span>(<span class="hljs-type">int</span> n):<span class="hljs-built_in">size</span>(n)&#123;<br>parent=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[size];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;size;i++)parent[i]=<span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br><span class="hljs-keyword">while</span>(parent[x]&gt;=<span class="hljs-number">0</span>) x=parent[x];<br><span class="hljs-keyword">return</span> x;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Union</span><span class="hljs-params">(<span class="hljs-type">int</span> r1,<span class="hljs-type">int</span> r2)</span></span>&#123;<br>parent[r1]+=parent[r2];<br>parent[r2]=r1;<br>&#125;<br>&#125;; <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> v1,v2,value;<br><span class="hljs-built_in">Node</span>(<span class="hljs-type">int</span> v1=<span class="hljs-number">-1</span>,<span class="hljs-type">int</span> v2=<span class="hljs-number">-1</span>,<span class="hljs-type">int</span> value=<span class="hljs-number">0</span>)&#123;<br>v1=v1;<br>v2=v2;<br>value=value;<br>&#125;<br><span class="hljs-built_in">Node</span>(<span class="hljs-type">const</span> Node&amp; n)&#123;<br>v1=n.v1;<br>v2=n.v2;<br>value=n.value;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Graph</span>&#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span>* vertex;<br><span class="hljs-type">int</span>** edge;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">findMin</span><span class="hljs-params">(Node&amp; newnode)</span></span>&#123;<br><span class="hljs-type">int</span> x=<span class="hljs-number">0</span>,y=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>;j&lt;n;j++)&#123;<br><span class="hljs-keyword">if</span>(edge[i][j]&lt;edge[x][y]&amp;&amp;edge[i][j]!=<span class="hljs-number">0</span>)&#123;<br>x=i;y=j;<br>&#125; <br>&#125;<br>&#125;<br>newnode.v1=x;<br>newnode.v2=y;<br>newnode.value=edge[x][y];<br>edge[x][y]=Max;<br>edge[y][x]=Max;<br>&#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Graph</span>(<span class="hljs-type">int</span> n):<span class="hljs-built_in">n</span>(n)&#123;<br>vertex=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n];<br>edge=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>*[n];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>vertex[i]=i;<br>edge[i]=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)&#123;<br><span class="hljs-keyword">if</span>(i==j)edge[i][j]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span> edge[i][j]=Max;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insertEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> v1,<span class="hljs-type">int</span> v2,<span class="hljs-type">int</span> value)</span></span>&#123;<br>edge[v1][v2]=value;<br>edge[v2][v1]=value;<br>&#125; <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)&#123;<br>cout&lt;&lt;edge[i][j]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout&lt;&lt;endl;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Kruskal</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-function">UFset <span class="hljs-title">F</span><span class="hljs-params">(n)</span></span>;<br><span class="hljs-type">int</span> count=<span class="hljs-number">0</span>,sum=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> u,v;<br>Node newnode;<br><span class="hljs-keyword">while</span>(count&lt;n<span class="hljs-number">-1</span>)&#123;<br><span class="hljs-built_in">findMin</span>(newnode); <br>u=F.<span class="hljs-built_in">Find</span>(newnode.v1);<br>v=F.<span class="hljs-built_in">Find</span>(newnode.v2);<br><span class="hljs-keyword">if</span>(u!=v)&#123;<br>F.<span class="hljs-built_in">Union</span>(u,v);<br>sum+=newnode.value;<br>count++;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> sum;<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> n,k;<br>cin&gt;&gt;n&gt;&gt;k;<br><span class="hljs-function">Graph <span class="hljs-title">G</span><span class="hljs-params">(n)</span></span>;<br><span class="hljs-type">int</span> v1,v2,value;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)&#123;<br>cin&gt;&gt;v1&gt;&gt;v2&gt;&gt;value;<br>G.<span class="hljs-built_in">insertEdge</span>(v1,v2,value);<br>&#125;<br><span class="hljs-comment">//G.show();</span><br><span class="hljs-type">int</span> min=G.<span class="hljs-built_in">Kruskal</span>();<br>cout&lt;&lt;min&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++数据结构实验第二次作业（2022--矿大）</title>
    <link href="/2022/06/21/C-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%BD%9C%E4%B8%9A%EF%BC%882022-%E7%9F%BF%E5%A4%A7%EF%BC%89/"/>
    <url>/2022/06/21/C-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%BD%9C%E4%B8%9A%EF%BC%882022-%E7%9F%BF%E5%A4%A7%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="问题-A-满二叉树的前序遍历"><a href="#问题-A-满二叉树的前序遍历" class="headerlink" title="问题 A: 满二叉树的前序遍历"></a>问题 A: 满二叉树的前序遍历</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给你一个满二叉树的层次遍历序列，请编程输出该二叉树的前序遍历序列。</p><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>第一行是n（n小于26）,表示有n个节点。第二行是该满二叉树的节点对应字母的层次遍历序列。</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>输出该满二叉数的前序遍历序列。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">3</span><br><span class="hljs-selector-tag">B</span> <span class="hljs-selector-tag">A</span> C<br></code></pre></td></tr></table></figure><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">BAC</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">preorder</span><span class="hljs-params">(<span class="hljs-type">char</span> arr[],<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> n)</span></span>&#123;<br>    cout&lt;&lt;arr[k];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-number">2</span>*k+<span class="hljs-number">1</span>&lt;n) <span class="hljs-built_in">preorder</span>(arr,<span class="hljs-number">2</span>*k+<span class="hljs-number">1</span>,n);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-number">2</span>*k+<span class="hljs-number">2</span>&lt;n) <span class="hljs-built_in">preorder</span>(arr,<span class="hljs-number">2</span>*k+<span class="hljs-number">2</span>,n);<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">char</span> * arr=<span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[n];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;arr[i];<br>    &#125;<br>    <span class="hljs-built_in">preorder</span>(arr,<span class="hljs-number">0</span>,n);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="问题-B-满二叉树的中序遍历"><a href="#问题-B-满二叉树的中序遍历" class="headerlink" title="问题 B: 满二叉树的中序遍历"></a>问题 B: 满二叉树的中序遍历</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>给你一个满二叉树的层次遍历序列，请编程输出该二叉树的中序遍历序列。</p><h4 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h4><p>第一行是n（n小于26）,表示有n个节点。第二行是该满二叉树的节点对应字母的层次遍历序列。</p><h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><p>输出该满二叉数的中序遍历序列。</p><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">3</span><br><span class="hljs-selector-tag">B</span> <span class="hljs-selector-tag">A</span> C<br></code></pre></td></tr></table></figure><h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ABC</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">inorder</span><span class="hljs-params">(<span class="hljs-type">char</span> arr[],<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-number">2</span>*k+<span class="hljs-number">1</span>&lt;n) <span class="hljs-built_in">inorder</span>(arr,<span class="hljs-number">2</span>*k+<span class="hljs-number">1</span>,n);<br>    cout&lt;&lt;arr[k];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-number">2</span>*k+<span class="hljs-number">2</span>&lt;n) <span class="hljs-built_in">inorder</span>(arr,<span class="hljs-number">2</span>*k+<span class="hljs-number">2</span>,n);<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">char</span> * arr=<span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[n];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;arr[i];<br>    &#125;<br>    <span class="hljs-built_in">inorder</span>(arr,<span class="hljs-number">0</span>,n);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="问题-C-满二叉树的后序遍历"><a href="#问题-C-满二叉树的后序遍历" class="headerlink" title="问题 C: 满二叉树的后序遍历"></a>问题 C: 满二叉树的后序遍历</h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p>给你一个满二叉树的层次遍历序列，请编程输出该二叉树的后序遍历序列。</p><h4 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h4><p>第一行是n（n小于26）,表示有n个节点。第二行是该满二叉树的节点对应字母的层次遍历序列。</p><h4 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h4><p>输出该满二叉数的后序遍历序列。</p><h4 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">3</span><br><span class="hljs-selector-tag">B</span> <span class="hljs-selector-tag">A</span> C<br></code></pre></td></tr></table></figure><h4 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ACB</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">postorder</span><span class="hljs-params">(<span class="hljs-type">char</span> arr[],<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-number">2</span>*k+<span class="hljs-number">1</span>&lt;n) <span class="hljs-built_in">postorder</span>(arr,<span class="hljs-number">2</span>*k+<span class="hljs-number">1</span>,n);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-number">2</span>*k+<span class="hljs-number">2</span>&lt;n) <span class="hljs-built_in">postorder</span>(arr,<span class="hljs-number">2</span>*k+<span class="hljs-number">2</span>,n);<br>    cout&lt;&lt;arr[k];<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">char</span> * arr=<span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[n];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;arr[i];<br>    &#125;<br>    <span class="hljs-built_in">postorder</span>(arr,<span class="hljs-number">0</span>,n);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="问题-D-任意二叉树的前序遍历"><a href="#问题-D-任意二叉树的前序遍历" class="headerlink" title="问题 D: 任意二叉树的前序遍历"></a>问题 D: 任意二叉树的前序遍历</h3><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p>有若干个节点，每个节点上都有编号，把这些节点随意地构成二叉树，请编程输出该二叉树的前序遍历序列。</p><h4 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h4><p>第一行是n（n小于100）,表示有n个节点，每个节点按从1到n依次编号。第一行后有n行，每行三个正整数i、l、r，分别表示节点i及对应的左右孩子的编号，如果不存在孩子则以-1表示。三个整数之间用一个空格隔开。</p><h4 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h4><p>输出该二叉数的前序遍历序列。</p><h4 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">1</span> -<span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span>-<span class="hljs-number">1</span> -<span class="hljs-number">1</span><br><span class="hljs-symbol">4 </span>-<span class="hljs-number">1</span> -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[],<span class="hljs-type">int</span> brr[],<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> &amp;r,<span class="hljs-type">int</span> &amp;num)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;num;i++)&#123;<br>        <span class="hljs-keyword">if</span>(arr[i]==k)&#123;<br>            <span class="hljs-keyword">if</span>(r==<span class="hljs-number">-1</span>) &#123;<br>                r=i;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            brr[i]=r;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    arr[num]=k;brr[num]=r;r=num;num++;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">preorder</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[],<span class="hljs-type">int</span> brr[],<span class="hljs-type">int</span> num,<span class="hljs-type">int</span> index)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;num;i++)&#123;<br>        <span class="hljs-keyword">if</span>(brr[i]==index)&#123;<br>            cout&lt;&lt;arr[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>            <span class="hljs-built_in">preorder</span>(arr,brr,num,i);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> *arr=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n];<br>    <span class="hljs-type">int</span> *brr=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n];<br>    <span class="hljs-type">int</span> a,b,c;<br>    <span class="hljs-type">int</span> num=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br>        <span class="hljs-type">int</span> r=<span class="hljs-number">-1</span>;<br>        <span class="hljs-built_in">insert</span>(arr,brr,a,r,num);<br>        <span class="hljs-type">int</span> s=r;<br>        <span class="hljs-type">int</span> t=r;<br>        <span class="hljs-keyword">if</span>(b!=<span class="hljs-number">-1</span>) <span class="hljs-built_in">insert</span>(arr,brr,b,s,num);<br>        <span class="hljs-keyword">if</span>(c!=<span class="hljs-number">-1</span>) <span class="hljs-built_in">insert</span>(arr,brr,c,t,num);<br>    &#125;<br>    <span class="hljs-built_in">preorder</span>(arr,brr,num,<span class="hljs-number">-1</span>);<br>    cout&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="问题-E-任意二叉树的中序遍历"><a href="#问题-E-任意二叉树的中序遍历" class="headerlink" title="问题 E: 任意二叉树的中序遍历"></a>问题 E: 任意二叉树的中序遍历</h3><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><p>有若干个节点，每个节点上都有编号，把这些节点随意地构成二叉树，请编程输出该二叉树的中序遍历序列。</p><h4 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h4><p>第一行是n（n小于100）,表示有n个节点，每个节点按从1到n依次编号。第一行后有n行，每行三个正整数i、l、r，分别表示节点i及对应的左右孩子的编号，如果不存在孩子则以-1表示。三个整数之间用一个空格隔开。</p><h4 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h4><p>输出该二叉数的中序遍历序列。</p><h4 id="样例输入-4"><a href="#样例输入-4" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">1</span> -<span class="hljs-number">1</span><br><span class="hljs-symbol">4 </span>-<span class="hljs-number">1</span> -<span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span>-<span class="hljs-number">1</span> -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="样例输出-4"><a href="#样例输出-4" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[],<span class="hljs-type">int</span> brr[],<span class="hljs-type">int</span> crr[],<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> &amp;r,<span class="hljs-type">int</span> &amp;num,<span class="hljs-type">int</span> tag)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;num;i++)&#123;<br>        <span class="hljs-keyword">if</span>(arr[i]==k)&#123;<br>            <span class="hljs-keyword">if</span>(r==<span class="hljs-number">-1</span>) &#123;<br>                r=i;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            brr[i]=r;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    arr[num]=k;brr[num]=r;crr[num]=tag;r=num;num++;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">preorder</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[],<span class="hljs-type">int</span> brr[],<span class="hljs-type">int</span> crr[],<span class="hljs-type">int</span> num,<span class="hljs-type">int</span> index,<span class="hljs-type">int</span> tag)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;num;i++)&#123;<br>        <span class="hljs-keyword">if</span>(brr[i]==index&amp;&amp;crr[i]==tag)&#123;<br>            <span class="hljs-built_in">preorder</span>(arr,brr,crr,num,i,<span class="hljs-number">0</span>);<br>            cout&lt;&lt;arr[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>            <span class="hljs-built_in">preorder</span>(arr,brr,crr,num,i,<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> *arr=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n];<br>    <span class="hljs-type">int</span> *brr=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n];<br>    <span class="hljs-type">int</span> *crr=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n];<br>    <span class="hljs-type">int</span> a,b,c;<br>    <span class="hljs-type">int</span> num=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br>        <span class="hljs-type">int</span> r=<span class="hljs-number">-1</span>;<br>        <span class="hljs-built_in">insert</span>(arr,brr,crr,a,r,num,<span class="hljs-number">0</span>);<br>        <span class="hljs-type">int</span> s=r;<br>        <span class="hljs-type">int</span> t=r;<br>        <span class="hljs-keyword">if</span>(b!=<span class="hljs-number">-1</span>) <span class="hljs-built_in">insert</span>(arr,brr,crr,b,s,num,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span>(c!=<span class="hljs-number">-1</span>) <span class="hljs-built_in">insert</span>(arr,brr,crr,c,t,num,<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-built_in">preorder</span>(arr,brr,crr,num,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>);<br>    cout&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="问题-F-任意二叉树的后序遍历"><a href="#问题-F-任意二叉树的后序遍历" class="headerlink" title="问题 F: 任意二叉树的后序遍历"></a>问题 F: 任意二叉树的后序遍历</h3><h4 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h4><p>有若干个节点，每个节点上都有编号，把这些节点随意地构成二叉树，请编程输出该二叉树的后序遍历序列。</p><h4 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h4><p>第一行是n（n小于100）,表示有n个节点，每个节点按从1到n依次编号。第一行后有n行，每行三个正整数i、l、r，分别表示节点i及对应的左右孩子的编号，如果不存在孩子则以-1表示。三个整数之间用一个空格隔开。</p><h4 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h4><p>输出该二叉数的后序遍历序列。</p><h4 id="样例输入-5"><a href="#样例输入-5" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">4 </span>-<span class="hljs-number">1</span> -<span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span>-<span class="hljs-number">1</span> -<span class="hljs-number">1</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">1</span> -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="样例输出-5"><a href="#样例输出-5" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span><span class="hljs-number">4</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[],<span class="hljs-type">int</span> brr[],<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> &amp;r,<span class="hljs-type">int</span> &amp;num)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;num;i++)&#123;<br>        <span class="hljs-keyword">if</span>(arr[i]==k)&#123;<br>            <span class="hljs-keyword">if</span>(r==<span class="hljs-number">-1</span>) &#123;<br>                r=i;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            brr[i]=r;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    arr[num]=k;brr[num]=r;r=num;num++;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">preorder</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[],<span class="hljs-type">int</span> brr[],<span class="hljs-type">int</span> num,<span class="hljs-type">int</span> index)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;num;i++)&#123;<br>        <span class="hljs-keyword">if</span>(brr[i]==index)&#123;<br>             <br>            <span class="hljs-built_in">preorder</span>(arr,brr,num,i);<br>            cout&lt;&lt;arr[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> *arr=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n];<br>    <span class="hljs-type">int</span> *brr=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n];<br>    <span class="hljs-type">int</span> a,b,c;<br>    <span class="hljs-type">int</span> num=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br>        <span class="hljs-type">int</span> r=<span class="hljs-number">-1</span>;<br>        <span class="hljs-built_in">insert</span>(arr,brr,a,r,num);<br>        <span class="hljs-type">int</span> s=r;<br>        <span class="hljs-type">int</span> t=r;<br>        <span class="hljs-keyword">if</span>(b!=<span class="hljs-number">-1</span>) <span class="hljs-built_in">insert</span>(arr,brr,b,s,num);<br>        <span class="hljs-keyword">if</span>(c!=<span class="hljs-number">-1</span>) <span class="hljs-built_in">insert</span>(arr,brr,c,t,num);<br>    &#125;<br>    <span class="hljs-built_in">preorder</span>(arr,brr,num,<span class="hljs-number">-1</span>);<br>    cout&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="问题-G-FBI树"><a href="#问题-G-FBI树" class="headerlink" title="问题 G: FBI树"></a>问题 G: FBI树</h3><h4 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h4><p>我们可以把由“0”和“1”组成的字符串分为三类：全“0”串称为 B 串，全“1”串称为 I 串，既含“0”又含“1”的串则称为 F 串。<br>FBI 树是一棵二叉树，它的结点类型也包括 F 结点，B 结点和 I 结点三种。由一个长度为 2N 的“01”串 S 可以构造出一棵 FBI 树 T，递归的构造方法如下：<br>(1) T 的根结点为 R，其类型与串 S 的类型相同；<br>(2) 若串 S 的长度大于 1，可将串 S 从中间分开，分为等长的左右子串 S1 和 S2；由左子串 S1 构造 R 的左子树 T1，由右子串 S2 构造 R 的右子树 T2。</p><p>现在给定一个长度为 2N 的“01”串，请用上述构造方法构造出一棵 FBI 树，并输出它的后序遍历序列。</p><h4 id="输入-6"><a href="#输入-6" class="headerlink" title="输入"></a>输入</h4><p>第一行是一个整数 N（0≤N≤10），第二行是一个长度为 2N 的“01”串。</p><h4 id="输出-6"><a href="#输出-6" class="headerlink" title="输出"></a>输出</h4><p>包括一行，这一行只包含一个字符串，即 FBI 树的后序遍历序列。</p><h4 id="样例输入-6"><a href="#样例输入-6" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><br><span class="hljs-number">10001011</span><br></code></pre></td></tr></table></figure><h4 id="样例输出-6"><a href="#样例输出-6" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">IBFBBBFIBFIIIFF</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">char</span>** matrix,<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> m)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>        matrix[n][i]=<span class="hljs-string">&#x27;F&#x27;</span>;<br>        <span class="hljs-keyword">if</span>(matrix[n<span class="hljs-number">-1</span>][<span class="hljs-number">2</span>*i]==<span class="hljs-string">&#x27;B&#x27;</span>&amp;&amp;matrix[n<span class="hljs-number">-1</span>][<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;B&#x27;</span>)matrix[n][i]=<span class="hljs-string">&#x27;B&#x27;</span>;<br>        <span class="hljs-keyword">if</span>(matrix[n<span class="hljs-number">-1</span>][<span class="hljs-number">2</span>*i]==<span class="hljs-string">&#x27;I&#x27;</span>&amp;&amp;matrix[n<span class="hljs-number">-1</span>][<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;I&#x27;</span>)matrix[n][i]=<span class="hljs-string">&#x27;I&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-type">char</span>** matrix,<span class="hljs-type">int</span> row,<span class="hljs-type">int</span> col)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(row==<span class="hljs-number">0</span>)&#123;<br>        cout&lt;&lt;matrix[row][col];<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">show</span>(matrix,row<span class="hljs-number">-1</span>,<span class="hljs-number">2</span>*col);<br>    <span class="hljs-built_in">show</span>(matrix,row<span class="hljs-number">-1</span>,<span class="hljs-number">2</span>*col+<span class="hljs-number">1</span>);<br>    cout&lt;&lt;matrix[row][col];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> k=<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,n);<br>    <span class="hljs-type">char</span> **matrix=<span class="hljs-keyword">new</span> <span class="hljs-type">char</span>*[n+<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n+<span class="hljs-number">1</span>;i++)&#123;<br>        matrix[i]=<span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[k];<br>    &#125;<br>    <span class="hljs-type">char</span> s[k];<br>    cin&gt;&gt;s;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)&#123;<br>        <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;1&#x27;</span>) matrix[<span class="hljs-number">0</span>][i]=<span class="hljs-string">&#x27;I&#x27;</span>;<br>        <span class="hljs-keyword">else</span> matrix[<span class="hljs-number">0</span>][i]=<span class="hljs-string">&#x27;B&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-built_in">merge</span>(matrix,i,<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,n-i));<br>    &#125;<br>    <span class="hljs-built_in">show</span>(matrix,n,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="问题-H-满二叉树的深度"><a href="#问题-H-满二叉树的深度" class="headerlink" title="问题 H: 满二叉树的深度"></a>问题 H: 满二叉树的深度</h3><h4 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h4><p>给你一个满二叉树的层次遍历序列，请编程输出该二叉树的深度。</p><h4 id="输入-7"><a href="#输入-7" class="headerlink" title="输入"></a>输入</h4><p>第一行是n（n小于26）,表示有n个节点。第二行是该满二叉树的节点对应字母的层次遍历序列。</p><h4 id="输出-7"><a href="#输出-7" class="headerlink" title="输出"></a>输出</h4><p>输出该满二叉数的深度。</p><h4 id="样例输入-7"><a href="#样例输入-7" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">3</span><br><span class="hljs-selector-tag">B</span> <span class="hljs-selector-tag">A</span> C<br></code></pre></td></tr></table></figure><h4 id="样例输出-7"><a href="#样例输出-7" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">2<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;x;<br>    &#125;<br>    <span class="hljs-type">int</span> count=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(n)&#123;<br>        n-=<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,i);<br>        count++;<br>        i++;<br>    &#125;<br>    cout&lt;&lt;count&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++数据结构实验第一次作业（2022--矿大）</title>
    <link href="/2022/06/21/C-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%9C%E4%B8%9A%EF%BC%882022-%E7%9F%BF%E5%A4%A7%EF%BC%89/"/>
    <url>/2022/06/21/C-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%9C%E4%B8%9A%EF%BC%882022-%E7%9F%BF%E5%A4%A7%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="1244-一排里的位置交换"><a href="#1244-一排里的位置交换" class="headerlink" title="1244: 一排里的位置交换"></a>1244: 一排里的位置交换</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>体育课上，老师把一排里的两个身高不同的同学的位置交换了一下以方便安排分组训练。你能编程模拟这个过程吗？</p><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>第一行是自然数n(n小于100)，表示有n个数，第二行是n个表示身高的数据，第三行是要交换的两个同学的序号(按左起从1开始依次排序)。</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>交换位置后的一排身高值。中间用空格间隔。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">152 </span><span class="hljs-number">155</span> <span class="hljs-number">120</span> <span class="hljs-number">145</span> <span class="hljs-number">160</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">152 </span><span class="hljs-number">160</span> <span class="hljs-number">120</span> <span class="hljs-number">145</span> <span class="hljs-number">155</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">exchange</span><span class="hljs-params">(<span class="hljs-type">int</span>* array,<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>&#123;<br>    <span class="hljs-type">int</span> temp=array[a<span class="hljs-number">-1</span>];<br>    array[a<span class="hljs-number">-1</span>]=array[b<span class="hljs-number">-1</span>];<br>    array[b<span class="hljs-number">-1</span>]=temp;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> *array=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;array[i];<br>    &#125;<br>    <span class="hljs-type">int</span> a,b;<br>    cin&gt;&gt;a&gt;&gt;b;<br>    <span class="hljs-built_in">exchange</span>(array,a,b);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cout&lt;&lt;array[i]&lt;&lt;<span class="hljs-string">&#x27;\t&#x27;</span>;<br>    &#125;<br>    cout&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1259-围成圈"><a href="#1259-围成圈" class="headerlink" title="1259: 围成圈"></a>1259: 围成圈</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>假如有一次班里组织户外活动，同学们随机围坐成一圈做游戏，每个同学都记住了左右同学的编号，活动结束后，老师想让你帮忙复原当时大家坐的位置，你能通过每个同学记录的左右同学的编号，把当时大家坐的一圈情况复原吗？</p><h4 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h4><p>第一行是人数n(n&lt;100)。从第二行开始n行，分别表示1-n编号的同学左右两个同学的编号。最后一行某个同学的编号K。</p><h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><p>围坐的这个圈里，从第K个同学开始顺时针的序列。</p><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">1</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> **array=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>*[n];<br>    <span class="hljs-type">int</span> a,b;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        array[i]=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">3</span>];<br>        cin&gt;&gt;a&gt;&gt;b;<br>        array[i][<span class="hljs-number">0</span>]=a;<br>        array[i][<span class="hljs-number">1</span>]=i+<span class="hljs-number">1</span>;<br>        array[i][<span class="hljs-number">2</span>]=b;<br>    &#125;<br>    <span class="hljs-type">int</span> k;<br>    cin&gt;&gt;k;<br>    <span class="hljs-type">int</span> t=n;<br>    cout&lt;&lt;k&lt;&lt;<span class="hljs-string">&#x27;\t&#x27;</span>;t--;<br>    <span class="hljs-keyword">while</span>(t!=<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            <span class="hljs-keyword">if</span>(k==array[i][<span class="hljs-number">2</span>])&#123;<br>                cout&lt;&lt;array[i][<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-string">&#x27;\t&#x27;</span>;t--;<br>                k=array[i][<span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1045-十进制整数转二进制"><a href="#1045-十进制整数转二进制" class="headerlink" title="1045: 十进制整数转二进制"></a>1045: 十进制整数转二进制</h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p>二进制是计算机运算的基础，给你一个十进制整数，你能编程实现转二进制吗？</p><h4 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h4><p>第一行n，表示接着下边有n个十进制整数，每个占一行。</p><h4 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h4><p>对应每个十进制整数输出相应二进制数占一行。</p><h4 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">2<br>5<br>16<br></code></pre></td></tr></table></figure><h4 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">101<br>10000<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">to2</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(n!=<span class="hljs-number">0</span>)&#123;<br>        array[k]=n%<span class="hljs-number">2</span>;<br>        k++;<br>        n/=<span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=k<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>        cout&lt;&lt;array[i];<br>    &#125;<br>    cout&lt;&lt;endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> *array=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;array[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-built_in">to2</span>(array[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1305-进出栈"><a href="#1305-进出栈" class="headerlink" title="1305: 进出栈"></a>1305: 进出栈</h3><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p>设栈S的初始状态为空，元素a, b, c, d, e, f, g 依次入栈，给你一个出栈序列，请编程判断出栈序列是否正确。</p><h4 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h4><p>占一行，为出栈序列。</p><h4 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h4><p>如果出栈学列是可能的，输出True，否则输出False。</p><h4 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">b</span> c d e f g<br></code></pre></td></tr></table></figure><h4 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">notlegal</span><span class="hljs-params">(<span class="hljs-type">char</span>* test,<span class="hljs-type">int</span> k)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;k<span class="hljs-number">-1</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>(test[i]&lt;test[i+<span class="hljs-number">1</span>])&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">char</span> array[<span class="hljs-number">7</span>],test[<span class="hljs-number">6</span>];<br>    <span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">7</span>;i++)&#123;<br>        cin&gt;&gt;array[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>;j&lt;<span class="hljs-number">7</span>;j++)&#123;<br>            <span class="hljs-keyword">if</span>(array[j]&lt;array[i])&#123;<br>                test[k]=array[j];<br>                k++;    <br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">notlegal</span>(test,k))&#123;<br>            cout&lt;&lt;<span class="hljs-string">&quot;False&quot;</span>&lt;&lt;endl;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        k=<span class="hljs-number">0</span>;<br>    &#125;<br>    cout&lt;&lt;<span class="hljs-string">&quot;True&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1306-栈容量"><a href="#1306-栈容量" class="headerlink" title="1306: 栈容量"></a>1306: 栈容量</h3><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><p>设栈S的初始状态为空，元素a，b，c，d，e，f，g依次入栈，出栈顺序为b，d，c，f，e，a，g那么栈容量至少应该是3。如果任意给你一个出栈序列，你能编程判断相应的栈容量至少是多少吗？</p><h4 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h4><p>元素a，b，c，d，e，f，g依次入栈情况下的一种出栈序列。</p><h4 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h4><p>对应出栈序列的栈容量至少是多少。</p><h4 id="样例输入-4"><a href="#样例输入-4" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">b</span> d c f e <span class="hljs-selector-tag">a</span> g<br></code></pre></td></tr></table></figure><h4 id="样例输出-4"><a href="#样例输出-4" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">3<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findmax</span><span class="hljs-params">(<span class="hljs-type">int</span> *count,<span class="hljs-type">int</span> k)</span></span>&#123;<br>    <span class="hljs-type">int</span> temp=count[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;k;i++)&#123;<br>        temp=temp&gt;count[i]?temp:count[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> temp;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">char</span> array[<span class="hljs-number">7</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">7</span>;i++)&#123;<br>        cin&gt;&gt;array[i];<br>    &#125;<br>    <span class="hljs-type">int</span> count[<span class="hljs-number">7</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">6</span>;i&gt;=<span class="hljs-number">1</span>;i--)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i<span class="hljs-number">-1</span>;j&gt;=<span class="hljs-number">0</span>;j--)&#123;<br>            <span class="hljs-keyword">if</span>(array[j]&gt;array[i])&#123;<br>                count[j]++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> max=<span class="hljs-built_in">findmax</span>(count,<span class="hljs-number">7</span>);<br>    cout&lt;&lt;max&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1274-自创语言"><a href="#1274-自创语言" class="headerlink" title="1274: 自创语言"></a>1274: 自创语言</h3><h4 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h4><p>学了一段英语课之后，小名同学发现英语单词就是26个字母中若干个组合在一起的，于是他想自己也创立一种语言，为了简化单词，他计划只选26个小写字母的前n个符号构造长度也为n个符号的单词，构造好单词后，先要编写个词典，给每个单词有个解释以便人们学习他自创的语言。你能编程帮助按字典序输出所有长度为n的单词吗？</p><h4 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h4><p>占一行，为整数n(n&lt;26)。</p><h4 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h4><p>所有由前n个符号构造长度也为n个符号的单词，按字典序每行输出一个单词。</p><h4 id="样例输入-5"><a href="#样例输入-5" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">2<br></code></pre></td></tr></table></figure><h4 id="样例输出-5"><a href="#样例输出-5" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">aa<br><span class="hljs-keyword">ab</span><br><span class="hljs-keyword">ba</span><br>bb<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">plus</span><span class="hljs-params">(<span class="hljs-type">char</span> *array,<span class="hljs-type">int</span> n)</span></span>&#123;<br>    array[n<span class="hljs-number">-1</span>]++;<br>    <span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(array[n<span class="hljs-number">-1</span>-k]==<span class="hljs-number">97</span>+n)&#123;<br>        array[n<span class="hljs-number">-1</span>-k]=<span class="hljs-number">97</span>;<br>        k++;<br>        <span class="hljs-keyword">if</span>(k!=n)&#123;<br>            array[n<span class="hljs-number">-1</span>-k]++;<br>        &#125;<br>    &#125;<br>&#125;<br> <br> <br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> n;<br>cin&gt;&gt;n;<br><span class="hljs-type">char</span> *array=<span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[n];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>    array[i]=<span class="hljs-number">97</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">pow</span>(n,n);i++)&#123;<br>    cout&lt;&lt;array&lt;&lt;endl;<br>    array[n<span class="hljs-number">-1</span>]++;<br>    <span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(array[n<span class="hljs-number">-1</span>-k]==<span class="hljs-number">97</span>+n)&#123;<br>        array[n<span class="hljs-number">-1</span>-k]=<span class="hljs-number">97</span>;<br>        k++;<br>        <span class="hljs-keyword">if</span>(k!=n)&#123;<br>            array[n<span class="hljs-number">-1</span>-k]++;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1256-离队"><a href="#1256-离队" class="headerlink" title="1256: 离队"></a>1256: 离队</h3><h4 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h4><p>体育课上，班上的同学排成了一排，结果有个同学突然感觉不适，需要去医院，就离队了，你能编程模拟离队后的状态吗？</p><h4 id="输入-6"><a href="#输入-6" class="headerlink" title="输入"></a>输入</h4><p>第一行是整数n(n&lt;100),第二行有n个整数，第三行是k，表示从左开始第k个离队。</p><h4 id="输出-6"><a href="#输出-6" class="headerlink" title="输出"></a>输出</h4><p>输出离队后的数字序列。</p><h4 id="样例输入-6"><a href="#样例输入-6" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">120 </span><span class="hljs-number">125</span> <span class="hljs-number">135</span> <span class="hljs-number">126</span> <span class="hljs-number">145</span><br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h4 id="样例输出-6"><a href="#样例输出-6" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">120 </span><span class="hljs-number">125</span> <span class="hljs-number">126</span> <span class="hljs-number">145</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> *array=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;array[i];<br>    &#125;<br>    <span class="hljs-type">int</span> k;<br>    cin&gt;&gt;k;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(i==k<span class="hljs-number">-1</span>) <span class="hljs-keyword">continue</span>;<br>        cout&lt;&lt;array[i]&lt;&lt;<span class="hljs-string">&#x27;\t&#x27;</span>;<br>    &#125;<br>    cout&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1257-入队"><a href="#1257-入队" class="headerlink" title="1257: 入队"></a>1257: 入队</h3><h4 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h4><p>体育课上，上课铃响后，大家排成了一排，结果有一个同学迟到了，老师让他插在这一排的某个位置，你能编程模拟这个过程吗？</p><h4 id="输入-7"><a href="#输入-7" class="headerlink" title="输入"></a>输入</h4><p>第一行是整数n(n&lt;100),第二行n个整数，第三行是整数m和要插入的位置k(位置从左往右依次从1排序)。</p><h4 id="输出-7"><a href="#输出-7" class="headerlink" title="输出"></a>输出</h4><p>入队后的n+1个数据序列。</p><h4 id="样例输入-7"><a href="#样例输入-7" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">123 </span><span class="hljs-number">125</span> <span class="hljs-number">128</span> <span class="hljs-number">121</span> <span class="hljs-number">145</span><br><span class="hljs-symbol">136 </span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h4 id="样例输出-7"><a href="#样例输出-7" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">123 </span><span class="hljs-number">136</span> <span class="hljs-number">125</span> <span class="hljs-number">128</span> <span class="hljs-number">121</span> <span class="hljs-number">145</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> *array=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;array[i];<br>    &#125;<br>    <span class="hljs-type">int</span> m,k;<br>    cin&gt;&gt;m&gt;&gt;k;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(i==k<span class="hljs-number">-1</span>) cout&lt;&lt;m&lt;&lt;<span class="hljs-string">&#x27;\t&#x27;</span>;<br>        cout&lt;&lt;array[i]&lt;&lt;<span class="hljs-string">&#x27;\t&#x27;</span>;<br>    &#125;<br>    cout&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
